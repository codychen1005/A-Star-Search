from random import randint
import math
from array import *
from copy import copy, deepcopy

grid = []
start = [None] * 2
goal = [None] * 2
hard_traverse_coordinates = []

ROWS = 120
COLS = 160
# ROWS = 2
# COLS = 3



TOTAL_BLOCKED = 3840


class Cell:
    def __init__(self, row, col, terrain, g_cost, h_cost, f_cost, parent):
        self.row = row
        self.col = col
        self.terrain = terrain
        self.g_cost = g_cost
        self.h_cost = h_cost
        self.f_cost = f_cost
        self.parent = parent
        
def make_grid():
    for column in range (COLS):
        grid.append([])
        for row in range(ROWS):
            grid[column].append(Cell(column, row, '1', -1, -1, -1, None))

    # for row in range (ROWS):
    #     grid.append([])
    #     for column in range(COLS):
    #         grid[row].append(Cell(row, column, '0', -1, -1, -1))

def make_hard():
    x_hard = 0
    y_hard = 0
    for i in range(8):
        x_hard = randint(0, (COLS-1))
        print(x_hard)
        y_hard = randint(0, (ROWS-1))
        print(y_hard)
        
        hard_randomize(x_hard, y_hard)


def hard_randomize(x_hard, y_hard):
    #TODO: make sure you cover directly horizontal/vertical
    #Four Quadrants:
    #Top Left
    for x in range(x_hard, (x_hard-15), -1):
        if(x > -1):
            for y in range(y_hard, (y_hard+15), 1):
                #generate random 
                if(y < ROWS):
                    is_hard = randint(0, 1)
                    if(is_hard == 0):
                        print("Coordinate: ", x, " ", y)
                        grid[x][y].terrain = '2'

    #Top Right
    for x in range(x_hard, (x_hard+15), 1):
        if (x < COLS):
            for y in range(y_hard, (y_hard+15), 1):
                #generate random 
                if(y < ROWS):
                    is_hard = randint(0, 1)
                    if(is_hard == 0):
                        grid[x][y].terrain = '2'

    #Bottom Left
    for x in range(x_hard, (x_hard-15), -1):
        if(x > -1):
            for y in range(y_hard, (y_hard-15), -1):
                #generate random 
                if(y > -1):
                    is_hard = randint(0, 1)
                    if(is_hard == 0):
                        grid[x][y].terrain = '2'

    
    #Bottom Right
    for x in range(x_hard, (x_hard-15), -1):
        if(x > -1):
            for y in range(y_hard, (y_hard+15), 1):
                #generate random 
                if(y < ROWS):
                    is_hard = randint(0, 1)
                    if(is_hard == 0):
                        grid[x][y].terrain = '2'


        
def init_path():
    x = 0
    y = 0
    direction = ''
    side = randint(1, 4)
    
    if side == 1:
        x = 0
        y = randint(0, ROWS-1)
        direction = 'r'
    elif side == 2:
        x = COLS-1
        y = randint(0, ROWS-1)
        direction = 'l'
    elif side == 3:
        x = randint(0, COLS-1)
        y = 0
        direction = 'd'
    else:
        x = randint(0, COLS-1)
        y = ROWS-1
        direction = 'u'

    if grid[x][y].terrain == 'a' or grid[x][y].terrain == 'b':
        return init_path()    

    return (x, y, direction)

def direct(current_direction):

    vector = ''
    prob = randint(0, 100)
    new_direction = ''

    if(prob >= 0 and prob < 60):
        vector = 's'
    elif(prob >= 60 and prob < 80):
        vector = 'l'
    else:
        vector = 'r'

    if current_direction == 'l':
        if vector == 's':
            new_direction = 'l'
        elif vector == 'l':
            new_direction = 'd'
        else:
            new_direction = 'u'

    elif current_direction == 'r':
        if vector == 's':
            new_direction = 'r'
        elif vector == 'l':
            new_direction = 'u'
        else:
            new_direction = 'd'

    elif current_direction == 'u':
        if vector == 's':
            new_direction = 'u'
        elif vector == 'l':
            new_direction = 'l'
        else:
            new_direction = 'r'

    else:
        if vector == 's':
            new_direction = 'd'
        elif vector == 'l':
            new_direction = 'l'
        else:
            new_direction = 'r'

    return new_direction

def position(x, y, direction, inc):

    if direction == 'd':
        y += inc
    elif direction == 'u':
        y -= inc
    elif direction == 'l':
        x -= inc
    else:
        x += inc

    return (x, y)

def moving(direction):
    if direction == 'l':
        x = -1
        y = 0
    elif direction == 'r':
        x = 1
        y = 0
    elif direction == 'u':
        x = 0
        y = -1
    else:
        x = 0
        y = 1
    return (x, y)


def reached_border(x, y):
    if x == 0 or x == COLS-1 or y == 0 or y == ROWS-1:
        return True
    return False

def mark_highway_cell(x, y):
    if grid[x][y].terrain == 'a' or grid[x][y].terrain == 'b':
        return -1
    elif grid[x][y].terrain == '1':
        grid[x][y].terrain = 'a'
    elif grid[x][y].terrain == '2':
        grid[x][y].terrain = 'b'
    return 0    

def mark_seg(x, y, direction):
    inc = moving(direction)
    x_inc = inc[0]
    y_inc = inc[1]

    for i in range(20):
        if mark_highway_cell(x, y) == -1:
            return -1
        
        x += x_inc
        y += y_inc

        if (reached_border(x+x_inc, y+y_inc)):
            if mark_highway_cell(x, y) == -1:
                return -1
            mark_highway_cell(x+x_inc, y+y_inc)
            return i+1

    return 20



def make_path(start_point):
    cell_count = 0

    x = start_point[0]
    y = start_point[1]
    direction = start_point[2]

    check = mark_seg(x, y, direction)

    path_coordinate = []
    
    if check == -1:
        return -1
    cell_count += check    

    x = position(x, y, direction, check)[0]
    y = position(x, y, direction, check)[1]
    


    while cell_count < 100 or (not reached_border(x, y)):
        direction = direct(direction)
        check = mark_seg(x, y, direction, temp_grid2)
        if check == -1 or check == 0:
            return -1

        cell_count += check    

        x = position(x, y, direction, check)[0]
        y = position(x, y, direction, check)[1]
    
    return 

def make_highway():
    paths = []

    for i in range(4):
        path_tries = 0
        check = -1
        
        while check == -1:
            if path_tries == 10:
                highway_clear()
                return make_highway()

            start_point = init_path()
            check = make_path(start_point)
            path_tries += 1

    return 0


def make_blocked():
    x_blocked = 0
    y_blocked = 0
    num_blocked = 0
    while(num_blocked < TOTAL_BLOCKED):
        x_blocked = randint(0, COLS-1)
        y_blocked = randint(0, ROWS-1)

        if((grid[x_blocked][y_blocked].terrain != 'a') and (grid[x_blocked][y_blocked].terrain != 'b') and (grid[x_blocked][y_blocked].terrain != '0')):
            grid[x_blocked][y_blocked].terrain = '0'
            num_blocked = num_blocked + 1
        

def make_start():
    is_top = randint(0,1)
    is_left = randint(0,1)
    start_x = 0
    start_y = 0
    if(is_top):
        start_y = randint(0, 20)
    else:
        start_y = randint(100, 120)
    if(is_left):
        start_x = randint(0, 20)
    else:
        start_x = randint(140, 160)
    while True:
        if(grid[start_x][start_y].terrain != '0'):
            start[0] = start_x
            start[1] = start_y
            return

def make_goal(start_x, start_y):
    goal_x = 0
    goal_y = 0
    is_top = randint(0,1)
    is_left = randint(0,1)

    if(is_top):
        goal_y = randint(0, 20)
    else:
        goal_y = randint(100, 120)
    if(is_left):
        goal_x = randint(0, 20)
    else:
        goal_x = randint(140, 160)

    #Set goal, if fail repeat
    while True:
        if(grid[goal_x][goal_y].terrain != '0'):
            distance =  math.sqrt((goal_x - start_x)**2 + (goal_y - start_y)**2)
            if(distance >= 100):
                
                #Set the goal at (goal_x, goal_y)
                return

def get_neighbors(cell):
    x = cell.x
    y = cell.y
    neighbors = []
    
    #Diagonal Neighbors
    if(x-1 > -1) and (y-1 > -1):
        if(grid[x-1][y-1].terrain != '0'):
            neighbors.append(grid[x-1][y-1])
    if(x-1 > -1) and (y+1 < 120):
        if(grid[x-1][y+1].terrain != '0'):
            neighbors.append(grid[x-1][y+1])
    if(x+1 < 160) and (y-1 > -1):
        if(grid[x+1][y-1].terrain != '0'):
            neighbors.append(grid[x+1][y-1])
    if(x+1 < 160) and (y+1 < 120):
        if(grid[x+1][y+1].terrain != '0'):
            neighbors.append(grid[x+1][y+1])
    
    #Horizontal/Vertical Neighbors
    if(x-1 > -1):
        if(grid[x-1][y].terrain != '0'):
            neighbors.append(grid[x-1][y])
    if(x+1 < 160):
        if(grid[x+1][y].terrain != '0'):
            neighbors.append(grid[x+1][y])
    if(y-1 > -1):
        neighbors.append(grid[x][y-1])
    if(y+1 < 120):
        if(grid[x][y+1].terrain != '0'):
            neighbors.append(grid[x][y+1])
    
    return neighbors

#print grid
def print_grid():
    for row in range (ROWS):
        for column in range (COLS):
            print (grid[column][row].terrain, end = ' ')
        print("\n")
        
#Output File for Grid
def write_grid_file():
    my_file = open("grid_file.txt", "w")
    my_file.write(start)
    my_file.write(goal)
    for i in range(8):
        my_file.write(hard_traverse_coordinates[i])
    for rows in range(ROWS):
        line = grid[rows]
        for cols in range(COLS):
               my_file.write(grid[rows][cols].terrain)
        my_file.write("\n") 
    my_file.close()

def read_grid_file(file):
    with open(file, 'r') as f:
        start_coordinates = f.readline()
        start[0] = start_coordinates[1]
        start[1] = start_coordinates[3]
        print(start)

        goal_coordinates = f.readline()
        goal[0] = goal_coordinates[1]
        goal[1] = goal_coordinates[3]
        print(goal)

        for i in range(8):
            #Take coordinates for centers and put them in a tuple
            hard_traverse_coordinates.append(f.readline())
            
            #hard_traverse_coordinates.append(f.readline())
        #make_grid(ROWS, COLS)
        for rows in range(ROWS):
            line = f.readline()
            for cols in range(COLS):
               grid[cols][rows].terrain = line[cols] 
